<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üåà Colorful Tic-Tac-Toe</title>
    <style>
        :root {
            --purple: #8e2de2;
            --blue: #4a00e0;
            --pink: #ff00cc;
            --orange: #ff7e00;
            --green: #00b09b;
            --yellow: #ffcc00;
            --red: #ff416c;
            --light: #f9f9f9;
            --dark: #2c3e50;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Comic Neue', cursive, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(45deg, var(--purple), var(--blue), var(--pink), var(--orange));
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            animation: gradientBG 15s ease infinite;
            background-size: 400% 400%;
        }

        @keyframes gradientBG {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .container {
            background: rgba(255, 255, 255, 0.85);
            border-radius: 25px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
            padding: 2.5rem;
            max-width: 500px;
            width: 100%;
            text-align: center;
            backdrop-filter: blur(5px);
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        h1 {
            color: var(--dark);
            margin-bottom: 1.5rem;
            font-size: 2.5rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
            background: linear-gradient(to right, var(--purple), var(--blue), var(--pink));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }

        .game-mode {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .mode-btn {
            padding: 1rem 1.8rem;
            border: none;
            border-radius: 15px;
            cursor: pointer;
            font-weight: 700;
            transition: all 0.3s;
            background: rgba(255, 255, 255, 0.8);
            color: var(--dark);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            font-size: 1rem;
            position: relative;
            overflow: hidden;
        }

        .mode-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            transition: 0.5s;
        }

        .mode-btn:hover::before {
            left: 100%;
        }

        .mode-btn.active {
            background: linear-gradient(to right, var(--purple), var(--blue));
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }

        .mode-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }

        .scoreboard {
            display: flex;
            justify-content: space-around;
            margin-bottom: 2rem;
            background: rgba(255, 255, 255, 0.7);
            padding: 1.2rem;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.5);
        }

        .player-score {
            text-align: center;
            padding: 0.5rem 1.5rem;
            border-radius: 10px;
            transition: all 0.3s;
        }

        .player-x {
            background: rgba(255, 65, 108, 0.1);
            border: 2px solid rgba(255, 65, 108, 0.3);
        }

        .player-o {
            background: rgba(0, 176, 155, 0.1);
            border: 2px solid rgba(0, 176, 155, 0.3);
        }

        .player-score h3 {
            color: var(--dark);
            margin-bottom: 0.5rem;
            font-size: 1.2rem;
        }

        .score {
            font-size: 1.8rem;
            font-weight: bold;
        }

        #x-score {
            color: var(--red);
        }

        #o-score {
            color: var(--green);
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 12px;
            margin-bottom: 2rem;
        }

        .cell {
            aspect-ratio: 1/1;
            background: white;
            border-radius: 15px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 3.5rem;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            position: relative;
            overflow: hidden;
        }

        .cell::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            transition: 0.5s;
        }

        .cell:hover::before {
            left: 100%;
        }

        .cell:hover {
            transform: translateY(-5px) scale(1.05);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }

        .cell.x {
            color: var(--red);
            text-shadow: 0 0 10px rgba(255, 65, 108, 0.5);
        }

        .cell.o {
            color: var(--green);
            text-shadow: 0 0 10px rgba(0, 176, 155, 0.5);
        }

        .cell.winner {
            background: rgba(255, 255, 255, 0.8);
            animation: pulse 0.8s infinite, glow 1.5s infinite alternate;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        @keyframes glow {
            from { box-shadow: 0 0 10px rgba(255, 215, 0, 0.5); }
            to { box-shadow: 0 0 25px rgba(255, 215, 0, 0.8); }
        }

        .status {
            font-size: 1.5rem;
            margin-bottom: 2rem;
            color: var(--dark);
            font-weight: 700;
            padding: 1rem;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.7);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .reset-btn {
            padding: 1rem 2rem;
            border: none;
            border-radius: 15px;
            background: linear-gradient(to right, var(--orange), var(--yellow));
            color: white;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            font-size: 1.1rem;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
        }

        .reset-btn:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
            background: linear-gradient(to right, var(--yellow), var(--orange));
        }

        @media (max-width: 500px) {
            .container {
                padding: 1.5rem;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .cell {
                font-size: 2.8rem;
            }
            
            .mode-btn {
                padding: 0.8rem 1.2rem;
                font-size: 0.9rem;
            }
            
            .reset-btn {
                padding: 0.8rem 1.5rem;
                font-size: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéÆ Tic-Tac-Toe üéÆ</h1>
        
        <div class="game-mode">
            <button class="mode-btn active" id="pvp-btn">üë• Player vs Player</button>
            <button class="mode-btn" id="pvc-btn">ü§ñ Player vs Computer</button>
        </div>
        
        <div class="scoreboard">
            <div class="player-score player-x">
                <h3>‚ùå Player X</h3>
                <div class="score" id="x-score">0</div>
            </div>
            <div class="player-score player-o">
                <h3>‚≠ï Player O</h3>
                <div class="score" id="o-score">0</div>
            </div>
        </div>
        
        <div class="status" id="status">‚ùå Player X's turn</div>
        
        <div class="game-board" id="board">
            <div class="cell" data-index="0"></div>
            <div class="cell" data-index="1"></div>
            <div class="cell" data-index="2"></div>
            <div class="cell" data-index="3"></div>
            <div class="cell" data-index="4"></div>
            <div class="cell" data-index="5"></div>
            <div class="cell" data-index="6"></div>
            <div class="cell" data-index="7"></div>
            <div class="cell" data-index="8"></div>
        </div>
        
        <button class="reset-btn" id="reset-btn">üîÑ Reset Game</button>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // DOM Elements
            const board = document.getElementById('board');
            const cells = document.querySelectorAll('.cell');
            const status = document.getElementById('status');
            const resetBtn = document.getElementById('reset-btn');
            const xScoreEl = document.getElementById('x-score');
            const oScoreEl = document.getElementById('o-score');
            const pvpBtn = document.getElementById('pvp-btn');
            const pvcBtn = document.getElementById('pvc-btn');

            // Game Variables
            let boardState = ['', '', '', '', '', '', '', '', ''];
            let currentPlayer = 'X';
            let gameActive = true;
            let xScore = 0;
            let oScore = 0;
            let gameMode = 'pvp'; // 'pvp' or 'pvc'

            // Winning Conditions
            const winConditions = [
                [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
                [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns
                [0, 4, 8], [2, 4, 6]             // diagonals
            ];

            // Initialize Game
            initGame();

            // Event Listeners
            cells.forEach(cell => {
                cell.addEventListener('click', handleCellClick);
            });

            resetBtn.addEventListener('click', resetGame);
            pvpBtn.addEventListener('click', () => setGameMode('pvp'));
            pvcBtn.addEventListener('click', () => setGameMode('pvc'));

            // Functions
            function initGame() {
                boardState = ['', '', '', '', '', '', '', '', ''];
                currentPlayer = 'X';
                gameActive = true;
                updateStatus();
                
                cells.forEach(cell => {
                    cell.textContent = '';
                    cell.classList.remove('x', 'o', 'winner');
                });
            }

            function updateStatus() {
                status.innerHTML = currentPlayer === 'X' ? '‚ùå Player X\'s turn' : '‚≠ï Player O\'s turn';
            }

            function handleCellClick(e) {
                const clickedCell = e.target;
                const clickedCellIndex = parseInt(clickedCell.getAttribute('data-index'));

                if (boardState[clickedCellIndex] !== '' || !gameActive) return;

                makeMove(clickedCell, clickedCellIndex);
                checkResult();

                if (gameMode === 'pvc' && gameActive && currentPlayer === 'O') {
                    setTimeout(computerMove, 600);
                }
            }

            function makeMove(cell, index) {
                boardState[index] = currentPlayer;
                cell.textContent = currentPlayer === 'X' ? '‚ùå' : '‚≠ï';
                cell.classList.add(currentPlayer.toLowerCase());
            }

            function computerMove() {
                const emptyCells = boardState.map((cell, index) => cell === '' ? index : null).filter(val => val !== null);
                
                if (emptyCells.length > 0) {
                    const randomIndex = emptyCells[Math.floor(Math.random() * emptyCells.length)];
                    const computerCell = document.querySelector(`.cell[data-index="${randomIndex}"]`);
                    
                    makeMove(computerCell, randomIndex);
                    checkResult();
                }
            }

            function checkResult() {
                let roundWon = false;

                for (let i = 0; i < winConditions.length; i++) {
                    const [a, b, c] = winConditions[i];
                    
                    if (boardState[a] === '' || boardState[b] === '' || boardState[c] === '') continue;
                    
                    if (boardState[a] === boardState[b] && boardState[b] === boardState[c]) {
                        roundWon = true;
                        
                        document.querySelector(`.cell[data-index="${a}"]`).classList.add('winner');
                        document.querySelector(`.cell[data-index="${b}"]`).classList.add('winner');
                        document.querySelector(`.cell[data-index="${c}"]`).classList.add('winner');
                        break;
                    }
                }

                if (roundWon) {
                    gameActive = false;
                    status.innerHTML = `üéâ Player ${currentPlayer} wins! ${currentPlayer === 'X' ? '‚ùå' : '‚≠ï'}`;
                    
                    if (currentPlayer === 'X') {
                        xScore++;
                        xScoreEl.textContent = xScore;
                    } else {
                        oScore++;
                        oScoreEl.textContent = oScore;
                    }
                    return;
                }

                if (!boardState.includes('')) {
                    gameActive = false;
                    status.innerHTML = "üòÖ Game ended in a draw!";
                    return;
                }

                currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
                updateStatus();
            }

            function resetGame() {
                initGame();
            }

            function resetScores() {
                xScore = 0;
                oScore = 0;
                xScoreEl.textContent = xScore;
                oScoreEl.textContent = oScore;
            }

            function setGameMode(mode) {
                gameMode = mode;
                
                if (mode === 'pvp') {
                    pvpBtn.classList.add('active');
                    pvcBtn.classList.remove('active');
                } else {
                    pvpBtn.classList.remove('active');
                    pvcBtn.classList.add('active');
                }
                
                resetGame();
                resetScores();
            }
        });
    </script>
</body>
</html>
